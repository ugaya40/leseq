"use strict";(self.webpackChunkleseq_docs=self.webpackChunkleseq_docs||[]).push([[18],{876:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=a,y=p["".concat(c,".").concat(m)]||p[m]||f[m]||o;return t?r.createElement(y,i(i({ref:n},u),{},{components:t})):r.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},43:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(7896),a=(t(2784),t(876));const o={id:"create",title:"Create Original Functions",sidebar_label:"Create Original Functions",sidebar_position:.5,custom_edit_url:null,hide_title:!0},i=void 0,s={unversionedId:"create",id:"create",title:"Create Original Functions",description:"Create Original Functions",source:"@site/docs/create.md",sourceDirName:".",slug:"/create",permalink:"/leseq/create",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:.5,frontMatter:{id:"create",title:"Create Original Functions",sidebar_label:"Create Original Functions",sidebar_position:.5,custom_edit_url:null,hide_title:!0},sidebar:"mainSidebar",previous:{title:"Seq<T>/AsyncSeq<T> Object",permalink:"/leseq/seq"},next:{title:"Equality Strategy",permalink:"/leseq/equality"}},c={},l=[{value:"Create Original Functions",id:"create-original-functions",level:2},{value:"Create Generator Functions",id:"create-generator-functions",level:3},{value:"Create Operator Functions",id:"create-operator-functions",level:3},{value:"Create Value Functions",id:"create-value-functions",level:3}],u={toc:l};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"create-original-functions"},"Create Original Functions"),(0,a.kt)("h3",{id:"create-generator-functions"},"Create Generator Functions"),(0,a.kt)("p",null,"The synchronous version of ",(0,a.kt)("strong",{parentName:"p"},"Generator")," returns ",(0,a.kt)("a",{parentName:"p",href:"/Seq/#seqt-object/"},"Seq<T",">"),". The asynchronous version returns ",(0,a.kt)("a",{parentName:"p",href:"/Seq/#asyncseqt-object"},"AsyncSeq<T",">"),"."),(0,a.kt)("p",null,"The simplest ",(0,a.kt)("strong",{parentName:"p"},"Generator")," is ",(0,a.kt)("a",{parentName:"p",href:"/api/generators/#from"},"from"),". It is also very easy to reimplement."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"function fromOriginal<T>(source: Iterable<T>): Seq<T> {\n  return new Seq(source);\n}\n\nconst result1 = fromOriginal([1,2,3,4,5]).pipe(filter(i => i % 2 == 0)).toArray();\n\n//result1: [2,4]\n\n\n//async version\nfunction fromAsAsyncOriginal<T>(source: Iterable<T> | AsyncIterable<T>): AsyncSeq<T> {\n  return new AsyncSeq(source);\n}\n\nconst result2 = await fromAsAsyncOriginal([1,2,3,4,5]).pipe(\n  filterAsync(async i => i % 2 == 0)\n).toArrayAsync();\n\n//result2: [2,4]\n")),(0,a.kt)("p",null,"The constructor of ",(0,a.kt)("a",{parentName:"p",href:"/Seq/#asyncseqt-object"},"AsyncSeq<T",">")," accepts an ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol"},"Iterable<T",">")," or ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator"},"AsyncIterable<T",">")," object."),(0,a.kt)("p",null,"The constructor of ",(0,a.kt)("a",{parentName:"p",href:"/Seq/"},"Seq<T",">")," accepts an ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol"},"Iterable<T",">")," object. Therefore, such an implementation is also possible."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"function* rangeInternal(start: number, count: number): Gen<number> {\n  let currentCount = 0;\n  while (currentCount < count) {\n    yield start++;\n    currentCount++;\n  }\n}\n\nfunction rangeOriginal(start: number, count: number): Seq<number> {\n  return new Seq(rangeInternal(start, count));\n}\n\nconst result = rangeOriginal(1,10).pipe(filter(i => i % 2 == 0)).toArray();\n\n//result: [2,4,6,8,10]\n")),(0,a.kt)("p",null,"We used the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"},"function* declaration"),"."),(0,a.kt)("h3",{id:"create-operator-functions"},"Create Operator Functions"),(0,a.kt)("p",null,"The synchronous version of ",(0,a.kt)("strong",{parentName:"p"},"Operator")," returns ",(0,a.kt)("strong",{parentName:"p"},"Operator<T, TResult",">")," type function. The asynchronous version returns ",(0,a.kt)("strong",{parentName:"p"},"AsyncOperator<T, TResult",">")," type function."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Operator<T, TResult",">"),"/",(0,a.kt)("strong",{parentName:"p"},"AsyncOperator<T, TResult",">")," is a ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"},"function* declaration"),".  that takes the current sequence as an argument. ",(0,a.kt)("strong",{parentName:"p"},"T")," is the type of the elements of the current sequence, and ",(0,a.kt)("strong",{parentName:"p"},"TResult")," is the type returned by the yield of the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"},"function* declaration")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"It is also recommended that the Generator function always be named"),", since the name of the Generator function will appear in the stack trace, which is related to debuggability."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const mapOriginal = <T, TResult>(func: (arg: T) => TResult): Operator<T, TResult> =>\n  function* mapOriginal(source: Seq<T>): Gen<TResult> {\n    for (const i of source) {\n      const result = func(i);\n      yield result;\n    }\n  };\n\nconst result1 = fromOriginal([1,2,3,4,5]).pipe(mapOriginal(i => i * i)).toArray();\n\n//result1: [1,4,9,16,25]\n\n//async version\nconst mapAsyncOriginal = <T, TResult>(func: (arg: T) => Promise<TResult>): AsyncOperator<T, TResult> =>\n  async function* mapAsyncOriginal(source: AsyncSeq<T>): AsyncGen<TResult> {\n    for await (const i of source) {\n      const result = await func(i);\n      yield result;\n    }\n  };\n\nconst sleep = (milliseconds: number) => new Promise(resolve => setTimeout(resolve,milliseconds));\n\nconst result2 = await fromAsAsyncOriginal([1,2,3,4,5]).pipe(\n  mapAsyncOriginal(async i => {\n    await sleep(1000);\n    return i * i;\n  }),\n).toArrayAsync();\n\n//5 seconds later... result2: [1,4,9,16,25]\n")),(0,a.kt)("p",null,"If you want to create an operator easily by combining existing operators, you can do the following."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const prefix = <T>(prefix: string): Operator<T,string> => \n  function* test(source: Seq<T>): Gen<string> {\n    yield* source.pipe(\n      map(i => `${prefix}:${new String(i)}`)\n    )\n  }\n\nconst result = from([1, 2, 3, 4, 5, 6, 7])\n  .pipe(\n    prefix(\'test\'),\n    take(3)\n  ).toArray();\n\n//result: ["test:1", "test:2", "test:3"]\n')),(0,a.kt)("h3",{id:"create-value-functions"},"Create Value Functions"),(0,a.kt)("p",null,"The synchronous version of ",(0,a.kt)("strong",{parentName:"p"},"Value")," returns ",(0,a.kt)("strong",{parentName:"p"},"SeqToValue<T, TResult",">")," type function. The asynchronous version returns ",(0,a.kt)("strong",{parentName:"p"},"AsyncSeqToValue<T, TResult",">")," type function."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"SeqToValue<T, TResult",">"),"/",(0,a.kt)("strong",{parentName:"p"},"AsyncSeqToValue<T, TResult",">")," takes the current sequence as an argument and returns an arbitrary value, where ",(0,a.kt)("strong",{parentName:"p"},"T")," is the type of the element in the current sequence and ",(0,a.kt)("strong",{parentName:"p"},"TResult")," is the type of the value to be returned."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const findOriginal =\n  <T>(predicate: (arg: T) => boolean = () => true): SeqToValue<T,T> =>\n  (seq: Seq<T>): T => {\n    for (const i of seq) {\n      if (predicate(i)) {\n        return i;\n      }\n    }\n    throw RangeError(`No elements matching the condition were found.`);\n  };\n\nconst result1 = fromOriginal([1,2,3,4,5]).pipe(mapOriginal(i => i * i)).value(findOriginal(i => i > 10));\n\n//result1: 16\n\n//async version\nconst findAsyncOriginal =\n  <T>(predicate: (arg: T) => Promise<boolean> | boolean = () => boolean): AsyncSeqToValue<T, T> =>\n  async (seq: AsyncSeq<T>): Promise<T> => {\n    for await (const i of seq) {\n      if (await predicate(i)) {\n        return i;\n      }\n    }\n    throw RangeError(`No elements matching the condition were found.`);\n  };\n\nconst result2 = await fromAsAsyncOriginal([1,2,3,4,5]).pipe(\n  mapAsyncOriginal(async i => {\n    await sleep(1000);\n    return i * i;\n  }),\n).valueAsync(\n  findAsyncOriginal(async i => {\n    await sleep(1000);\n    return i > 10\n  })\n);\n\n//8 seconds later... result2: 16\n")))}p.isMDXComponent=!0}}]);