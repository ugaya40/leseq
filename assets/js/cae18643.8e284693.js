"use strict";(self.webpackChunkleseq_docs=self.webpackChunkleseq_docs||[]).push([[327],{876:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>u});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),m=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},o=function(e){var t=m(e.components);return n.createElement(d.Provider,{value:t},e.children)},k="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},N=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),k=m(a),N=r,u=k["".concat(d,".").concat(N)]||k[N]||s[N]||l;return a?n.createElement(u,i(i({ref:t},o),{},{components:a})):n.createElement(u,i({ref:t},o))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=N;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p[k]="string"==typeof e?e:r,i[1]=p;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}N.displayName="MDXCreateElement"},925:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var n=a(7896),r=(a(2784),a(876));const l={id:"api-operators",title:"operators",sidebar_label:"operators",sidebar_position:.5,custom_edit_url:null,hide_title:!0},i=void 0,p={unversionedId:"api/operators/api-operators",id:"api/operators/api-operators",title:"operators",description:"Operators",source:"@site/docs/api/operators/index.md",sourceDirName:"api/operators",slug:"/api/operators/",permalink:"/leseq/api/operators/",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:.5,frontMatter:{id:"api-operators",title:"operators",sidebar_label:"operators",sidebar_position:.5,custom_edit_url:null,hide_title:!0},sidebar:"mainSidebar",previous:{title:"to",permalink:"/leseq/api/to/"},next:{title:"values",permalink:"/leseq/api/values/"}},d={},m=[{value:"Operators",id:"operators",level:2},{value:"catchError",id:"catcherror",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"chunk",id:"chunk",level:3},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"chunkByAccumulation",id:"chunkbyaccumulation",level:3},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"concat",id:"concat",level:3},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"concatValue",id:"concatvalue",level:3},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"difference",id:"difference",level:3},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"filter",id:"filter",level:3},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"finalize",id:"finalize",level:3},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"flatten",id:"flatten",level:3},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"groupBy",id:"groupby",level:3},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"intersect",id:"intersect",level:3},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"map",id:"map",level:3},{value:"Type parameters",id:"type-parameters-12",level:4},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"orderBy",id:"orderby",level:3},{value:"Type parameters",id:"type-parameters-13",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"repeat",id:"repeat",level:3},{value:"Type parameters",id:"type-parameters-14",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"reverse",id:"reverse",level:3},{value:"Type parameters",id:"type-parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"scan",id:"scan",level:3},{value:"Type parameters",id:"type-parameters-16",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"skip",id:"skip",level:3},{value:"Type parameters",id:"type-parameters-17",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"skipWhile",id:"skipwhile",level:3},{value:"Type parameters",id:"type-parameters-18",level:4},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"take",id:"take",level:3},{value:"Type parameters",id:"type-parameters-19",level:4},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"takeWhile",id:"takewhile",level:3},{value:"Type parameters",id:"type-parameters-20",level:4},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"tap",id:"tap",level:3},{value:"Type parameters",id:"type-parameters-21",level:4},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"union",id:"union",level:3},{value:"Type parameters",id:"type-parameters-22",level:4},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"uniq",id:"uniq",level:3},{value:"Type parameters",id:"type-parameters-23",level:4},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"zipWith",id:"zipwith",level:3},{value:"Type parameters",id:"type-parameters-24",level:4},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"Type parameters",id:"type-parameters-25",level:4},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Defined in",id:"defined-in-25",level:4},{value:"Type parameters",id:"type-parameters-26",level:4},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Defined in",id:"defined-in-26",level:4},{value:"Type parameters",id:"type-parameters-27",level:4},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Defined in",id:"defined-in-27",level:4},{value:"Type parameters",id:"type-parameters-28",level:4},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Defined in",id:"defined-in-28",level:4},{value:"Async Operators",id:"async-operators",level:2},{value:"catchErrorAsync",id:"catcherrorasync",level:3},{value:"Type parameters",id:"type-parameters-29",level:4},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-29",level:4},{value:"Defined in",id:"defined-in-29",level:4},{value:"chunkAsync",id:"chunkasync",level:3},{value:"Type parameters",id:"type-parameters-30",level:4},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Defined in",id:"defined-in-30",level:4},{value:"chunkByAccumulationAsync",id:"chunkbyaccumulationasync",level:3},{value:"Type parameters",id:"type-parameters-31",level:4},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Defined in",id:"defined-in-31",level:4},{value:"concatAsync",id:"concatasync",level:3},{value:"Type parameters",id:"type-parameters-32",level:4},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Defined in",id:"defined-in-32",level:4},{value:"concatValueAsync",id:"concatvalueasync",level:3},{value:"Type parameters",id:"type-parameters-33",level:4},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Defined in",id:"defined-in-33",level:4},{value:"differenceAsync",id:"differenceasync",level:3},{value:"Type parameters",id:"type-parameters-34",level:4},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Defined in",id:"defined-in-34",level:4},{value:"filterAsync",id:"filterasync",level:3},{value:"Type parameters",id:"type-parameters-35",level:4},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-35",level:4},{value:"Defined in",id:"defined-in-35",level:4},{value:"Type parameters",id:"type-parameters-36",level:4},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-36",level:4},{value:"Defined in",id:"defined-in-36",level:4},{value:"finalizeAsync",id:"finalizeasync",level:3},{value:"Type parameters",id:"type-parameters-37",level:4},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-37",level:4},{value:"Defined in",id:"defined-in-37",level:4},{value:"flattenAsync",id:"flattenasync",level:3},{value:"Type parameters",id:"type-parameters-38",level:4},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-38",level:4},{value:"Defined in",id:"defined-in-38",level:4},{value:"groupByAsync",id:"groupbyasync",level:3},{value:"Type parameters",id:"type-parameters-39",level:4},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-39",level:4},{value:"Defined in",id:"defined-in-39",level:4},{value:"intersectAsync",id:"intersectasync",level:3},{value:"Type parameters",id:"type-parameters-40",level:4},{value:"Parameters",id:"parameters-39",level:4},{value:"Returns",id:"returns-40",level:4},{value:"Defined in",id:"defined-in-40",level:4},{value:"mapAsync",id:"mapasync",level:3},{value:"Type parameters",id:"type-parameters-41",level:4},{value:"Parameters",id:"parameters-40",level:4},{value:"Returns",id:"returns-41",level:4},{value:"Defined in",id:"defined-in-41",level:4},{value:"orderByAsync",id:"orderbyasync",level:3},{value:"Type parameters",id:"type-parameters-42",level:4},{value:"Parameters",id:"parameters-41",level:4},{value:"Returns",id:"returns-42",level:4},{value:"Defined in",id:"defined-in-42",level:4},{value:"repeatAsync",id:"repeatasync",level:3},{value:"Type parameters",id:"type-parameters-43",level:4},{value:"Parameters",id:"parameters-42",level:4},{value:"Returns",id:"returns-43",level:4},{value:"Defined in",id:"defined-in-43",level:4},{value:"reverseAsync",id:"reverseasync",level:3},{value:"Type parameters",id:"type-parameters-44",level:4},{value:"Returns",id:"returns-44",level:4},{value:"Defined in",id:"defined-in-44",level:4},{value:"scanAsync",id:"scanasync",level:3},{value:"Type parameters",id:"type-parameters-45",level:4},{value:"Parameters",id:"parameters-43",level:4},{value:"Returns",id:"returns-45",level:4},{value:"Defined in",id:"defined-in-45",level:4},{value:"skipAsync",id:"skipasync",level:3},{value:"Type parameters",id:"type-parameters-46",level:4},{value:"Parameters",id:"parameters-44",level:4},{value:"Returns",id:"returns-46",level:4},{value:"Defined in",id:"defined-in-46",level:4},{value:"skipWhileAsync",id:"skipwhileasync",level:3},{value:"Type parameters",id:"type-parameters-47",level:4},{value:"Parameters",id:"parameters-45",level:4},{value:"Returns",id:"returns-47",level:4},{value:"Defined in",id:"defined-in-47",level:4},{value:"takeAsync",id:"takeasync",level:3},{value:"Type parameters",id:"type-parameters-48",level:4},{value:"Parameters",id:"parameters-46",level:4},{value:"Returns",id:"returns-48",level:4},{value:"Defined in",id:"defined-in-48",level:4},{value:"takeWhileAsync",id:"takewhileasync",level:3},{value:"Type parameters",id:"type-parameters-49",level:4},{value:"Parameters",id:"parameters-47",level:4},{value:"Returns",id:"returns-49",level:4},{value:"Defined in",id:"defined-in-49",level:4},{value:"tapAsync",id:"tapasync",level:3},{value:"Type parameters",id:"type-parameters-50",level:4},{value:"Parameters",id:"parameters-48",level:4},{value:"Returns",id:"returns-50",level:4},{value:"Defined in",id:"defined-in-50",level:4},{value:"unionAsync",id:"unionasync",level:3},{value:"Type parameters",id:"type-parameters-51",level:4},{value:"Parameters",id:"parameters-49",level:4},{value:"Returns",id:"returns-51",level:4},{value:"Defined in",id:"defined-in-51",level:4},{value:"uniqAsync",id:"uniqasync",level:3},{value:"Type parameters",id:"type-parameters-52",level:4},{value:"Parameters",id:"parameters-50",level:4},{value:"Returns",id:"returns-52",level:4},{value:"Defined in",id:"defined-in-52",level:4},{value:"zipWithAsync",id:"zipwithasync",level:3},{value:"Type parameters",id:"type-parameters-53",level:4},{value:"Parameters",id:"parameters-51",level:4},{value:"Returns",id:"returns-53",level:4},{value:"Defined in",id:"defined-in-53",level:4},{value:"Type parameters",id:"type-parameters-54",level:4},{value:"Parameters",id:"parameters-52",level:4},{value:"Returns",id:"returns-54",level:4},{value:"Defined in",id:"defined-in-54",level:4},{value:"Type parameters",id:"type-parameters-55",level:4},{value:"Parameters",id:"parameters-53",level:4},{value:"Returns",id:"returns-55",level:4},{value:"Defined in",id:"defined-in-55",level:4},{value:"Type parameters",id:"type-parameters-56",level:4},{value:"Parameters",id:"parameters-54",level:4},{value:"Returns",id:"returns-56",level:4},{value:"Defined in",id:"defined-in-56",level:4},{value:"Type parameters",id:"type-parameters-57",level:4},{value:"Parameters",id:"parameters-55",level:4},{value:"Returns",id:"returns-57",level:4},{value:"Defined in",id:"defined-in-57",level:4}],o={toc:m};function k(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"operators"},"Operators"),(0,r.kt)("h3",{id:"catcherror"},"catchError"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"catchError"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TAlternative"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"action"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"TAlternative"),">"),(0,r.kt)("p",null,"If the original iterable sequence raises an exception, the specified action is performed, terminating the enumeration or enumerating an alternate sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1,2,3]).pipe(\n  tap(i => {\n    if(i === 2) throw new Error('test');\n  }),\n  catchError((e) => {\n    if(e instanceof Error) {\n      console.log(`error occurred: ${e.message}`)\n    }\n  })\n).toArray();\n\n//result: [1]\n//console: error occurred: test\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1,2,3]).pipe(\n  tap(i => {\n    if(i === 2) throw new Error();\n  }),\n  catchError(() => [4,5,6])\n).toArray();\n\n//result: [1,4,5,6]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"with nested & finalize")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"\nconst alternative = from([4,5,6]).pipe(\n  tap(i => {\n    if(i === 5) throw new Error();\n  }),\n  catchError(() => [7,8,9]),\n  finalize(() => console.log('seq 2 finished')),\n)\n\nconst result = from([1,2,3]).pipe(\n  tap(i => {\n    if(i === 2) throw new Error();\n  }),\n  catchError(() => alternative),\n  finalize(() => console.log('seq 1 finished'))\n).toArray();\n\n//result: [1,4,7,8,9]\n//console: seq 2 finished\n//console: seq 1 finished\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"different type")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const output = from([1,2,3]).pipe(\n  tap(i => {\n    if(i === 2) throw new Error();\n  }),\n  catchError(() => ['a', 'b', 'c'])\n).toArray();\n\n// type output : (number | string)[]\n// output : [1, 'a', 'b', 'c']\n")),(0,r.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TAlternative")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"alternative iterable element type.")))),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"action")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"error"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"unknown"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"void")," ","|"," (",(0,r.kt)("inlineCode",{parentName:"td"},"error"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"unknown"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TAlternative"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"finalize action. Returns void or an alternative Iterable.")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"TAlternative"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/catchError.ts#L77"},"catchError.ts:77")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"chunk"},"chunk"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"chunk"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"size"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"Returns a sequence divided into array of the specified size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5, 6, 7]).pipe(chunk(2)).toArray();\n//result: [[1,2],[3,4],[5,6],[7]]\n")),(0,r.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"size")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Length of elements per array.")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/chunk.ts#L16"},"chunk.ts:16")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"chunkbyaccumulation"},"chunkByAccumulation"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"chunkByAccumulation"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TAccumulate"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"seed"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"func"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"thresholdUntil"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"Returns a sequence divided into arrays based on an accumulation function and a threshold condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = from([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).pipe(\n  chunkByAccumulation(\n    0,\n    (acc, current) => acc + current,\n    (acc) => acc <= 10\n  )\n).toArray();\n\n// result1: [[1, 2, 3, 4], [5], [6], [7], [8], [9], [10]]\n\n// Example where the first value doesn't satisfy the condition\nconst result2 = from([11, 1, 2, 3]).pipe(\n  chunkByAccumulation(\n    0,\n    (acc, current) => acc + current,\n    (acc) => acc <= 10\n  )\n).toArray();\n\n// result2: []\n\n// Example where enumeration stops when a single value doesn't satisfy the condition\nconst result3 = from([1, 2, 3, 15, 4, 5]).pipe(\n  chunkByAccumulation(\n    0,\n    (acc, current) => acc + current,\n    (acc) => acc <= 10\n  )\n).toArray();\n\n// result3: [[1, 2, 3]]\n")),(0,r.kt)("p",null,"In these examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A new chunk starts whenever the sum exceeds 10."),(0,r.kt)("li",{parentName:"ul"},"In result2, an empty array is returned because the first value (11) immediately fails the condition."),(0,r.kt)("li",{parentName:"ul"},"In result3, enumeration stops at 15 because it fails the condition on its own, and the previous chunk is returned.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The accumulation is reset to the seed value at the beginning of each new chunk."),(0,r.kt)("li",{parentName:"ul"},"If the first value in the sequence doesn't satisfy the thresholdUntil condition, an empty sequence is returned."),(0,r.kt)("li",{parentName:"ul"},"If at any point in the sequence a single value doesn't satisfy the thresholdUntil condition, the enumeration stops at that point.")),(0,r.kt)("h4",{id:"type-parameters-2"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type returned by the aggregate function.")))),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"seed")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The initial value for the accumulation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"accInChunk"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"current"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function that takes the current accumulation and the current element, and returns a new accumulation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"thresholdUntil")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"accInChunk"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function that takes the current accumulation and returns true if the chunk should continue, or false if a new chunk should start. When this function returns false, the accumulation is reset to the seed value for the next chunk.")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/chunkByAccumulation.ts#L60"},"chunkByAccumulation.ts:60")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"concat"},"concat"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"concat"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence in which the current sequence and the specified sequence are concatenated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2]).pipe(concat([3,4])).toArray();\n//result: [1,2,3,4]\n")),(0,r.kt)("h4",{id:"type-parameters-3"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sequence to be concatenated.")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/concat.ts#L16"},"concat.ts:16")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"concatvalue"},"concatValue"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"concatValue"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns the sequence to which the specified value is added."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2]).pipe(concatValue(3)).toArray();\n//result: [1,2,3]\n")),(0,r.kt)("h4",{id:"type-parameters-4"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Element you want to add to the sequence.")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/concatValue.ts#L16"},"concatValue.ts:16")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"difference"},"difference"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"difference"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"removeDuplicate?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns the sequence that is the difference set between the current sequence and the specified sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = from([1, 2, 3, 6, 6]).pipe(difference([2,3,4,5])).toArray();\n//result1: [1,6]\n\nconst result2 = from([1, 2, 3, 6, 6]).pipe(difference([2,3,4,5],i => i, false)).toArray();\n//result2: [1,6,6]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst target = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'e\'}, value: "test2"},\n];\n\nconst result3 = from(source).pipe(\n  difference(\n    target,\n    i => i.groupKey,\n    true,\n    one => one.mainKey + one.subKey\n  )\n).toArray();\n\n// result3: [\n//   {"groupKey":{"mainKey":2,"subKey":"b"},"value":"test2"},\n//   {"groupKey":{"mainKey":1,"subKey":"c"},"value":"test4"}\n// ]\n')),(0,r.kt)("p",null,"For more information on ",(0,r.kt)("em",{parentName:"p"},"keySelector")," and ",(0,r.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,r.kt)("p",null,"The implementation of ",(0,r.kt)("em",{parentName:"p"},"defaultSelector")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const defaultSelector = (target: any): any => target;\n")),(0,r.kt)("h4",{id:"type-parameters-5"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,r.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sequence to be removed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"one"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"defaultSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality..")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"removeDuplicate")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("em",{parentName:"td"},"removeDuplicate")," is set to true, duplicates will be removed; default is true.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,r.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/difference.ts#L59"},"difference.ts:59")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"filter"},"filter"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"filter"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"predicate"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Returns a sequence that has been filtered by the specified condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5]).pipe(filter(i => i % 2 == 0)).toArray();\n//result: [2,4]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"with User Defined Type Guard")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1,'a',2,'b'])\n  .pipe(\n    filter<number | string, string>((i): i is string => typeof i === 'string')\n  )\n  .toMutableArray();\n//result: ['a','b']\n//result type is string[]\n")),(0,r.kt)("h4",{id:"type-parameters-6"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TResult")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"predicate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => arg is TResult"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Conditional functions for filtering.")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/filter.ts#L3"},"filter.ts:3")),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"filter"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"predicate"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence that has been filtered by the specified condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5]).pipe(filter(i => i % 2 == 0)).toArray();\n//result: [2,4]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"with User Defined Type Guard")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1,'a',2,'b'])\n  .pipe(\n    filter<number | string, string>((i): i is string => typeof i === 'string')\n  )\n  .toMutableArray();\n//result: ['a','b']\n//result type is string[]\n")),(0,r.kt)("h4",{id:"type-parameters-7"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"predicate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Conditional functions for filtering.")))),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/filter.ts#L4"},"filter.ts:4")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"finalize"},"finalize"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"finalize"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"action"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Invokes a specified action after the source iterable sequence terminates normally or exceptionally."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5]).pipe(\n  take(3)\n  finalize(() => console.log('finalized'))\n).toArray();\n\n//result: [1,2,3]\n//console: finalized\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const source = from([1, 2, 3, 4, 5]).pipe(\n  take(3)\n  finalize(() => console.log('finalized'))\n);\n\nfor(const one of source) {\n  console.log(one)\n}\n\n//console: 1\n//console: 2\n//console: 3\n//console: finalized\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"break")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const source = from([1, 2, 3, 4, 5]).pipe(\n  take(3)\n  finalize(() => console.log('finalized'))\n);\n\nfor(const one of source) {\n  console.log(one)\n  if(one == 2) break;\n}\n\n//console: 1\n//console: 2\n//console: finalized\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5]).pipe(\n  take(3)\n  finalize(() => console.log('finalized'))\n).value(find(i == 2));\n\n//result: 2\n//console: finalized\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"error")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5]).pipe(\n  take(3)\n  tap(() => {throw new Error('test')})\n  finalize(() => console.log('finalized'))\n).toArray();\n\n//console: finalized\n")),(0,r.kt)("h4",{id:"type-parameters-8"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"action")),(0,r.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,r.kt)("inlineCode",{parentName:"td"},"void")),(0,r.kt)("td",{parentName:"tr",align:"left"},"finalize action.")))),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/finalize.ts#L76"},"finalize.ts:76")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"flatten"},"flatten"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"flatten"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Returns a flattened sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = from([[1,2],[3,4]]).pipe(flatten(i => i)).toArray();\n\n//result1: [1,2,3,4]\n\nconst result2 = from([\n   {values:[1,2]},\n   {values:[3,4]}\n ]).pipe(\n   flatten(i => i.values)\n ).toArray();\n\n//result2: [1,2,3,4]\n")),(0,r.kt)("h4",{id:"type-parameters-9"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TResult")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Result element type.")))),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TResult"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function that takes an element of a sequence and returns it in an Iterable form.")))),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/flatten.ts#L27"},"flatten.ts:27")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"groupby"},"groupBy"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"groupBy"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TValue"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"elementSelector?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", { ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"values"),": readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"TValue"),"[]  }",">"),(0,r.kt)("p",null,"Returns a sequence grouped by a specified key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const source1 = [\n  {groupKey: 1, value: "test1"},\n  {groupKey: 3, value: "test2"},\n  {groupKey: 1, value: "test3"},\n  {groupKey: 1, value: "test4"},\n  {groupKey: 3, value: "test5"},\n  {groupKey: 2, value: "test6"}\n]\n\nconst result1 = from(source1).pipe(groupBy(one => one.groupKey),).toArray();\n\n// result1: [\n//   {key: 1, values: [\n//     {groupKey: 1, value: "test1"},\n//     {groupKey: 1, value: "test3"},\n//     {groupKey: 1, value: "test4"}\n//   ]},\n//   {key: 3, values: [\n//     {groupKey: 3, value: "test2"},\n//     {groupKey: 3, value: "test5"}\n//   ]},\n//   {key: 2, values: [\n//     {groupKey: 2, value: "test6"}\n//   ]}\n// ]\n\nconst source2 = [\n  {groupKey: {key: 1}, value: "test1"},\n  {groupKey: {key: 2}, value: "test2"},\n  {groupKey: {key: 1}, value: "test3"},\n  {groupKey: {key: 1}, value: "test4"},\n]\n\nconst result2 = from(source2).pipe(groupBy(one => one.groupKey,one => one.value,k => k.key),).toArray();\n\n// result2: [\n//   {key: {key: 1}, values: ["test1","test3","test4"]},\n//   {key: {key: 2}, values: ["test2"]}\n// ];\n')),(0,r.kt)("p",null,"For more information on ",(0,r.kt)("em",{parentName:"p"},"keySelector")," and ",(0,r.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,r.kt)("p",null,"The implementation of ",(0,r.kt)("em",{parentName:"p"},"defaultSelector")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const defaultSelector = (target: any): any => target;\n")),(0,r.kt)("h4",{id:"type-parameters-10"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,r.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type that will be enumerated in the Value property of the grouped result.")))),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"target"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality..")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"elementSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"target"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"defaultSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object to be enumerated in the Value property of the grouped result.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,r.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", { ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"values"),": readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"TValue"),"[]  }",">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/groupBy.ts#L69"},"groupBy.ts:69")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"intersect"},"intersect"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"intersect"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence that is the product set of the current sequence and the specified sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = from([1, 2, 3]).pipe(intersect([2,3,4,5])).toArray();\n//result1: [2,3]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst target = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'e\'}, value: "test2"},\n];\n\nconst result2 = from(source).pipe(\n  intersect(\n    target,\n    i => i.groupKey,\n    one => one.mainKey + one.subKey\n  )\n).toArray();\n\n// result2: [\n//   {"groupKey":{"mainKey":1,"subKey":"a"},"value":"test1"}\n// ]\n')),(0,r.kt)("p",null,"For more information on ",(0,r.kt)("em",{parentName:"p"},"keySelector")," and ",(0,r.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,r.kt)("p",null,"The implementation of ",(0,r.kt)("em",{parentName:"p"},"defaultSelector")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const defaultSelector = (target: any): any => target;\n")),(0,r.kt)("h4",{id:"type-parameters-11"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,r.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,r.kt)("h4",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sequence to be removed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"one"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"defaultSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,r.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/intersect.ts#L54"},"intersect.ts:54")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"map"},"map"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"map"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Returns the sequence in which each element has been transformed by the specified transformation function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5]).pipe(map(i => i * i)).toArray();\n//result: [1,4,9,16,25]\n")),(0,r.kt)("h4",{id:"type-parameters-12"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TResult")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Transformed element type.")))),(0,r.kt)("h4",{id:"parameters-12"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TResult")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Transform function.")))),(0,r.kt)("h4",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/map.ts#L17"},"map.ts:17")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"orderby"},"orderBy"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"orderBy"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sortType?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"compareFunction?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence sorted by a specified key."),(0,r.kt)("p",null,"Internally, it uses ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"},"Array.sort()"),", and its function is basically the same as Array.sort(), except that it is given a ",(0,r.kt)("em",{parentName:"p"},"compareFunction")," by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = from([4,1,2,5,3]).pipe(\n  orderBy(i => i, 'asc')\n).toArray();\n\n//result1: [1,2,3,4,5]\n\nconst originalCompareFunction = (a: number, b:number) => {\n  if(a % 2 < b % 2) return - 1;\n  if(a % 2 > b % 2) return 1;\n  return 0;\n}\n\nconst result2 = from([4,1,5,3,2]).pipe(\n  orderBy(i => i, 'asc', originalCompareFunction)\n).toArray();\n\n//result2: [4,2,1,5,3]\n")),(0,r.kt)("p",null,"Also, the implementation of the default ",(0,r.kt)("em",{parentName:"p"},"compareFunction")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const defaultSortFunction = (a: any, b: any) => {\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n")),(0,r.kt)("h4",{id:"type-parameters-13"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,r.kt)("h4",{id:"parameters-13"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return sort key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"sortType")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"SortType")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"'asc'")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"'asc'")," or ",(0,r.kt)("em",{parentName:"td"},"'desc'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"compareFunction")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"a"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"b"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"defaultCompareFunction")),(0,r.kt)("td",{parentName:"tr",align:"left"},"See ",(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"},"Array.sort()")," for more information.")))),(0,r.kt)("h4",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/orderBy.ts#L47"},"orderBy.ts:47")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"repeat"},"repeat"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"repeat"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"count?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence that repeats the source sequence a specified number of times."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3]).pipe(repeat(3)).toArray();\n//result: [1,2,3,1,2,3,1,2,3]\n")),(0,r.kt)("h4",{id:"type-parameters-14"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-14"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"count")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If this argument is not specified or -1 is specified, it repeats indefinitely. If a natural number is specified, it repeats the specified number of times.")))),(0,r.kt)("h4",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/repeat.ts#L16"},"repeat.ts:16")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"reverse"},"reverse"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"reverse"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence in reverse order of the current sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1, 2, 3, 4, 5]).pipe(reverse()).toArray();\n//result: [5,4,3,2,1]\n")),(0,r.kt)("h4",{id:"type-parameters-15"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"returns-15"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/reverse.ts#L15"},"reverse.ts:15")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"scan"},"scan"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"scan"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TAccumulate"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"seed"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TAccumulate"),">"),(0,r.kt)("p",null,"Returns the resulting sequence after applying the aggregate function to the elements of the current sequence.\nThe difference from ",(0,r.kt)("a",{parentName:"p",href:"/api/values/#reduce"},"reduce()")," is that each time the aggregate function is applied, the intermediate steps are also enumerated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const output = from([1, 2, 3, 4, 5]).pipe(\n  scan(100, (acc, i) => acc + i)\n).toArray();\n\n//result: [101, 103, 106, 110, 115]\n")),(0,r.kt)("h4",{id:"type-parameters-16"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type returned by the aggregate function.")))),(0,r.kt)("h4",{id:"parameters-15"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"seed")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This is the initial value for aggregation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"acc"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"current"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Aggregate function.")))),(0,r.kt)("h4",{id:"returns-16"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TAccumulate"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/scan.ts#L22"},"scan.ts:22")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"skip"},"skip"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"skip"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"count"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns the sequence with the specified number of skips."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = range(1,10).pipe(\n  skip(3)\n).toArray()\n\n//result: [4,5,6,7,8,9,10]\n")),(0,r.kt)("h4",{id:"type-parameters-17"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-16"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"count")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Number of pieces to skip.")))),(0,r.kt)("h4",{id:"returns-17"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/skip.ts#L19"},"skip.ts:19")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"skipwhile"},"skipWhile"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"skipWhile"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"predicate"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns the sequence of elements skipped while matching the condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = range(1,10).pipe(\n  skipWhile(i => i < 8)\n).toArray()\n\n//result: [8,9,10]\n")),(0,r.kt)("h4",{id:"type-parameters-18"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-17"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"predicate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Condition to skip enumeration.")))),(0,r.kt)("h4",{id:"returns-18"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/skipWhile.ts#L19"},"skipWhile.ts:19")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"take"},"take"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"take"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"count"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence that enumerates the specified number of items."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = range(1,10).pipe(\n  take(3)\n).toArray()\n\n//result: [1,2,3]\n")),(0,r.kt)("h4",{id:"type-parameters-19"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-18"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"count")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Number to enumerate.")))),(0,r.kt)("h4",{id:"returns-19"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-19"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/take.ts#L19"},"take.ts:19")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"takewhile"},"takeWhile"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"takeWhile"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"predicate"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence to be enumerated only while the condition is matched."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = range(1,10).pipe(\n  takeWhile(i => i < 5)\n).toArray()\n\n//result: [1,2,3,4]\n")),(0,r.kt)("h4",{id:"type-parameters-20"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-19"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"predicate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Condition.")))),(0,r.kt)("h4",{id:"returns-20"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-20"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/takeWhile.ts#L19"},"takeWhile.ts:19")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"tap"},"tap"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"tap"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Run side effects. The returning sequence is the same as the current one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = from([1,2,3]).pipe(\n  tap(i => console.log(i * i))\n).toArray();\n\n//result: [1,2,3]\n\n//console:\n// 1\n// 4\n// 9\n")),(0,r.kt)("h4",{id:"type-parameters-21"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-20"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"void")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Side effects to perform")))),(0,r.kt)("h4",{id:"returns-21"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-21"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/tap.ts#L24"},"tap.ts:24")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"union"},"union"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"union"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence that is the union set of the current sequence and the specified sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = from([1, 2, 3]).pipe(union([2,3,4,5])).toArray();\n//result1: [1,2,3,4,5]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst target = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'e\'}, value: "test2"},\n];\n\nconst result2 = from(source).pipe(\n  union(\n    target,\n    i => i.groupKey,\n    one => one.mainKey + one.subKey\n  )\n).toArray();\n\n// result2: [\n//   {"groupKey":{"mainKey":1,"subKey":"a"},"value":"test1"},\n//   {"groupKey":{"mainKey":2,"subKey":"b"},"value":"test2"},\n//   {"groupKey":{"mainKey":1,"subKey":"c"},"value":"test4"},\n//   {"groupKey":{"mainKey":2,"subKey":"e"},"value":"test2"}\n// ]\n')),(0,r.kt)("p",null,"For more information on ",(0,r.kt)("em",{parentName:"p"},"keySelector")," and ",(0,r.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,r.kt)("p",null,"The implementation of ",(0,r.kt)("em",{parentName:"p"},"defaultSelector")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const defaultSelector = (target: any): any => target;\n")),(0,r.kt)("h4",{id:"type-parameters-22"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,r.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,r.kt)("h4",{id:"parameters-21"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sequence to be removed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"one"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"defaultSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,r.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,r.kt)("h4",{id:"returns-22"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-22"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/union.ts#L56"},"union.ts:56")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"uniq"},"uniq"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"uniq"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a deduplicated sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = from([1,1,3,2,4,4,4,1,5]).pipe(uniq()).toArray();\n//result1: [1,3,2,4,5]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst result2 = from(source).pipe(\n  uniq(\n    i => i.groupKey,\n    one => one.mainKey + one.subKey\n  )\n).toArray();\n\n// result2: [\n//   {"groupKey":{"mainKey":1,"subKey":"a"},"value":"test1"},\n//   {"groupKey":{"mainKey":2,"subKey":"b"},"value":"test2"},\n//   {"groupKey":{"mainKey":1,"subKey":"c"},"value":"test4"},\n// ]\n')),(0,r.kt)("p",null,"For more information on ",(0,r.kt)("em",{parentName:"p"},"keySelector")," and ",(0,r.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,r.kt)("p",null,"The implementation of ",(0,r.kt)("em",{parentName:"p"},"defaultSelector")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const defaultSelector = (target: any): any => target;\n")),(0,r.kt)("h4",{id:"type-parameters-23"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,r.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,r.kt)("h4",{id:"parameters-22"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"target"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"defaultSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,r.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,r.kt)("h4",{id:"returns-23"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-23"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/uniq.ts#L48"},"uniq.ts:48")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"zipwith"},"zipWith"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"zipWith"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T5"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"source1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source5"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T5"),"]",">"),(0,r.kt)("p",null,"Returns a sequence of arrays consisting of the elements of the source array and the elements of the multiple sequences given as arguments, concatenated one by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = from([1,2,3]).pipe(\n  zipWith(['a','b'])\n).toArray();\n\n//result1: [[1,'a'],[2,'b']]\n\nconst result2 = from([1,2,3]).pipe(\n  zipWith(['a','b'],[true,false,true])\n).toArray();\n\n//result2: [[1,'a',true],[2,'b',false]]\n")),(0,r.kt)("h4",{id:"type-parameters-24"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"First element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T2")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T4")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fourth element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T5")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fifth element type.")))),(0,r.kt)("h4",{id:"parameters-23"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T1"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"First iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T2"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source3")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T3"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source4")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T4"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fourth iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source5")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T5"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fifth iterable.")))),(0,r.kt)("h4",{id:"returns-24"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T5"),"]",">"),(0,r.kt)("p",null,"[T,T1,T2,T3,T4,T5]"," sequence."),(0,r.kt)("h4",{id:"defined-in-24"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/zipWith.ts#L35"},"zipWith.ts:35")),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"zipWith"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"source1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source4"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),"]",">"),(0,r.kt)("p",null,"Returns a sequence of arrays consisting of the elements of the source array and the elements of the multiple sequences given as arguments, concatenated one by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = from([1,2,3]).pipe(\n  zipWith(['a','b'])\n).toArray();\n\n//result1: [[1,'a'],[2,'b']]\n\nconst result2 = from([1,2,3]).pipe(\n  zipWith(['a','b'],[true,false,true])\n).toArray();\n\n//result2: [[1,'a',true],[2,'b',false]]\n")),(0,r.kt)("h4",{id:"type-parameters-25"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"First element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T2")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T4")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fourth element type.")))),(0,r.kt)("h4",{id:"parameters-24"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T1"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"First iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T2"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source3")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T3"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source4")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T4"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fourth iterable.")))),(0,r.kt)("h4",{id:"returns-25"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),"]",">"),(0,r.kt)("p",null,"[T,T1,T2,T3,T4]"," sequence."),(0,r.kt)("h4",{id:"defined-in-25"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/zipWith.ts#L72"},"zipWith.ts:72")),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"zipWith"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"source1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source3"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),"]",">"),(0,r.kt)("p",null,"Returns a sequence of arrays consisting of the elements of the source array and the elements of the multiple sequences given as arguments, concatenated one by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = from([1,2,3]).pipe(\n  zipWith(['a','b'])\n).toArray();\n\n//result1: [[1,'a'],[2,'b']]\n\nconst result2 = from([1,2,3]).pipe(\n  zipWith(['a','b'],[true,false,true])\n).toArray();\n\n//result2: [[1,'a',true],[2,'b',false]]\n")),(0,r.kt)("h4",{id:"type-parameters-26"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"First element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T2")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third element type.")))),(0,r.kt)("h4",{id:"parameters-25"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T1"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"First iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T2"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source3")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T3"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third iterable.")))),(0,r.kt)("h4",{id:"returns-26"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),"]",">"),(0,r.kt)("p",null,"[T,T1,T2,T3]"," sequence."),(0,r.kt)("h4",{id:"defined-in-26"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/zipWith.ts#L106"},"zipWith.ts:106")),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"zipWith"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"source1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source2"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),"]",">"),(0,r.kt)("p",null,"Returns a sequence of arrays consisting of the elements of the source array and the elements of the multiple sequences given as arguments, concatenated one by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = from([1,2,3]).pipe(\n  zipWith(['a','b'])\n).toArray();\n\n//result1: [[1,'a'],[2,'b']]\n\nconst result2 = from([1,2,3]).pipe(\n  zipWith(['a','b'],[true,false,true])\n).toArray();\n\n//result2: [[1,'a',true],[2,'b',false]]\n")),(0,r.kt)("h4",{id:"type-parameters-27"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"First element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T2")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second element type.")))),(0,r.kt)("h4",{id:"parameters-26"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T1"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"First iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T2"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second iterable.")))),(0,r.kt)("h4",{id:"returns-27"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),"]",">"),(0,r.kt)("p",null,"[T,T1,T2]"," sequence."),(0,r.kt)("h4",{id:"defined-in-27"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/zipWith.ts#L133"},"zipWith.ts:133")),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"zipWith"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"source1"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),"]",">"),(0,r.kt)("p",null,"Returns a sequence of arrays consisting of the elements of the source array and the elements of the multiple sequences given as arguments, concatenated one by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = from([1,2,3]).pipe(\n  zipWith(['a','b'])\n).toArray();\n\n//result1: [[1,'a'],[2,'b']]\n\nconst result2 = from([1,2,3]).pipe(\n  zipWith(['a','b'],[true,false,true])\n).toArray();\n\n//result2: [[1,'a',true],[2,'b',false]]\n")),(0,r.kt)("h4",{id:"type-parameters-28"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"First element type.")))),(0,r.kt)("h4",{id:"parameters-27"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Iterable"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T1"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"First iterable.")))),(0,r.kt)("h4",{id:"returns-28"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Operator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),"]",">"),(0,r.kt)("p",null,"[T,T1]"," sequence."),(0,r.kt)("h4",{id:"defined-in-28"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/zipWith.ts#L158"},"zipWith.ts:158")),(0,r.kt)("h2",{id:"async-operators"},"Async Operators"),(0,r.kt)("h3",{id:"catcherrorasync"},"catchErrorAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"catchErrorAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TAlternative"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"action"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"TAlternative"),">"),(0,r.kt)("p",null,"If the original iterable sequence raises an exception, the specified action is performed, terminating the enumeration or enumerating an alternate sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1,2,3]).pipe(\n  tapAsync(async i => {\n    if(i === 2) throw new Error('test');\n  }),\n  catchErrorAsync(async (e) => {\n    if(e instanceof Error) {\n      console.log(`error occurred: ${e.message}`)\n    }\n  })\n).toArrayAsync();\n\n//result: [1]\n//console: error occurred: test\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1,2,3]).pipe(\n  tapAsync(async i => {\n    if(i === 2) throw new Error();\n  }),\n  catchErrorAsync(async () => [4,5,6])\n).toArrayAsync();\n\n//result: [1,4,5,6]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"with nested & finalize")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"\nconst alternative = fromAsAsync([4,5,6]).pipe(\n  tapAsync(async i => {\n    if(i === 5) throw new Error();\n  }),\n  catchErrorAsync(async () => [7,8,9]),\n  finalizeAsync(async () => console.log('seq 2 finished')),\n)\n\nconst result = await fromAsAsync([1,2,3]).pipe(\n  tapAsync(async i => {\n    if(i === 2) throw new Error();\n  }),\n  catchErrorAsync(async () => alternative),\n  finalizeAsync(async () => console.log('seq 1 finished'))\n).toArrayAsync();\n\n//result: [1,4,7,8,9]\n//console: seq 2 finished\n//console: seq 1 finished\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"different type")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const output = await fromAsAsync([1,2,3]).pipe(\n  tapAsync(async i => {\n    if(i === 2) throw new Error();\n  }),\n  catchErrorAsync(async () => ['a', 'b', 'c'])\n).toArrayAsync();\n\n// type output : (number | string)[]\n// output : [1, 'a', 'b', 'c']\n")),(0,r.kt)("h4",{id:"type-parameters-29"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TAlternative")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"alternative iterable element type.")))),(0,r.kt)("h4",{id:"parameters-28"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"action")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"error"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"unknown"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"void"),">"," ","|"," (",(0,r.kt)("inlineCode",{parentName:"td"},"error"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"unknown"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TAlternative"),">",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"finalize action. Returns void or an alternative Iterable.")))),(0,r.kt)("h4",{id:"returns-29"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"TAlternative"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-29"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/catchErrorAsync.ts#L77"},"async/catchErrorAsync.ts:77")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"chunkasync"},"chunkAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"chunkAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"size"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"Returns a sequence divided into array of the specified size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1, 2, 3, 4, 5, 6, 7]).pipe(\n  chunkAsync(2)\n).toArrayAsync();\n//result: [[1,2],[3,4],[5,6],[7]]\n")),(0,r.kt)("h4",{id:"type-parameters-30"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-29"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"size")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Length of elements per array.")))),(0,r.kt)("h4",{id:"returns-30"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-30"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/chunkAsync.ts#L18"},"async/chunkAsync.ts:18")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"chunkbyaccumulationasync"},"chunkByAccumulationAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"chunkByAccumulationAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TAccumulate"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"seed"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"func"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"thresholdUntil"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"Returns a sequence divided into arrays based on an asynchronous accumulation function and a threshold condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = await fromAsAsync([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).pipe(\n  chunkByAccumulationAsync(\n    0,\n    async (acc, current) => acc + current,\n    async (acc) => acc <= 10\n  )\n).toArrayAsync();\n\n// result1: [[1, 2, 3, 4], [5], [6], [7], [8], [9], [10]]\n\n// Example where the first value doesn't satisfy the condition\nconst result2 = await fromAsAsync([11, 1, 2, 3]).pipe(\n  chunkByAccumulationAsync(\n    0,\n    async (acc, current) => acc + current,\n    async (acc) => acc <= 10\n  )\n).toArrayAsync();\n\n// result2: []\n\n// Example where enumeration stops when a single value doesn't satisfy the condition\nconst result3 = await fromAsAsync([1, 2, 3, 15, 4, 5]).pipe(\n  chunkByAccumulationAsync(\n    0,\n    async (acc, current) => acc + current,\n    async (acc) => acc <= 10\n  )\n).toArrayAsync();\n\n// result3: [[1, 2, 3]]\n")),(0,r.kt)("p",null,"In these examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A new chunk starts whenever the sum exceeds 10."),(0,r.kt)("li",{parentName:"ul"},"In result2, an empty array is returned because the first value (11) immediately fails the condition."),(0,r.kt)("li",{parentName:"ul"},"In result3, enumeration stops at 15 because it fails the condition on its own, and the previous chunk is returned.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The accumulation is reset to the seed value at the beginning of each new chunk."),(0,r.kt)("li",{parentName:"ul"},"If the first value in the sequence doesn't satisfy the thresholdUntil condition, an empty sequence is returned."),(0,r.kt)("li",{parentName:"ul"},"If at any point in the sequence a single value doesn't satisfy the thresholdUntil condition, the enumeration stops at that point.")),(0,r.kt)("h4",{id:"type-parameters-31"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type returned by the aggregate function.")))),(0,r.kt)("h4",{id:"parameters-30"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"seed")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The initial value for the accumulation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"accInChunk"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"current"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"An asynchronous function that takes the current accumulation and the current element, and returns a Promise that resolves to a new accumulation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"thresholdUntil")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"accInChunk"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"boolean"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"An asynchronous function that takes the current accumulation and returns a Promise that resolves to true if the chunk should continue, or false if a new chunk should start. When this function returns false, the accumulation is reset to the seed value for the next chunk.")))),(0,r.kt)("h4",{id:"returns-31"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"[]",">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-31"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/chunkByAccumulationAsync.ts#L60"},"async/chunkByAccumulationAsync.ts:60")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"concatasync"},"concatAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"concatAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence in which the current sequence and the specified sequence are concatenated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1, 2]).pipe(\n  concat([3,4])\n).toArrayAsync();\n//result: [1,2,3,4]\n")),(0,r.kt)("h4",{id:"type-parameters-32"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-31"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sequence to be concatenated.")))),(0,r.kt)("h4",{id:"returns-32"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-32"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/concatAsync.ts#L18"},"async/concatAsync.ts:18")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"concatvalueasync"},"concatValueAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"concatValueAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns the sequence to which the specified value is added."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1, 2]).pipe(\n  concatValueAsync(3)\n).toArrayAsync();\n//result: [1,2,3]\n")),(0,r.kt)("h4",{id:"type-parameters-33"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-32"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Element you want to add to the sequence.")))),(0,r.kt)("h4",{id:"returns-33"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-33"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/concatValueAsync.ts#L18"},"async/concatValueAsync.ts:18")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"differenceasync"},"differenceAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"differenceAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"removeDuplicate?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns the sequence that is the difference set between the current sequence and the specified sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = await fromAsAsync([1, 2, 3, 6, 6]).pipe(\n  differenceAsync([2,3,4,5])\n).toArrayAsync();\n//result1: [1,6]\n\nconst result2 = await fromAsAsync([1, 2, 3, 6, 6]).pipe(\n  differenceAsync([2,3,4,5], async i => i, false)\n).toArrayAsync();\n//result2: [1,6,6]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst target = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'e\'}, value: "test2"},\n];\n\nconst result3 = await fromAsAsync(source).pipe(\n  differenceAsync(\n    target,\n    async i => i.groupKey,\n    true,\n    async one => one.mainKey + one.subKey\n  )\n).toArrayAsync();\n\n// result3: [\n//   {"groupKey":{"mainKey":2,"subKey":"b"},"value":"test2"},\n//   {"groupKey":{"mainKey":1,"subKey":"c"},"value":"test4"}\n// ]\n')),(0,r.kt)("p",null,"For more information on ",(0,r.kt)("em",{parentName:"p"},"keySelector")," and ",(0,r.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,r.kt)("p",null,"The implementation of ",(0,r.kt)("em",{parentName:"p"},"asyncDefaultSelector")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const asyncDefaultSelector = (target: any): any => Promise.resolve(target);\n")),(0,r.kt)("h4",{id:"type-parameters-34"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,r.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,r.kt)("h4",{id:"parameters-33"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sequence to be removed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"one"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"asyncDefaultSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality..")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"removeDuplicate")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If ",(0,r.kt)("em",{parentName:"td"},"removeDuplicate")," is set to true, duplicates will be removed; default is true.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,r.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,r.kt)("h4",{id:"returns-34"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-34"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/differenceAsync.ts#L63"},"async/differenceAsync.ts:63")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"filterasync"},"filterAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"filterAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"predicate"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Returns a sequence that has been filtered by the specified condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1, 2, 3, 4, 5]).pipe(\n  filterAsync(async i => i % 2 == 0)\n).toArrayAsync();\n//result: [2,4]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"with User Defined Type Guard")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1,'a',2,'b'])\n  .pipe(\n    filterAsync<number | string, string>((i): i is string => typeof i === 'string')\n  )\n  .toMutableArrayAsync();\n//result: ['a','b']\n//result type is string[]\n")),(0,r.kt)("h4",{id:"type-parameters-35"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TResult")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,r.kt)("h4",{id:"parameters-34"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"predicate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => arg is TResult"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Conditional functions for filtering.")))),(0,r.kt)("h4",{id:"returns-35"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-35"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/filterAsync.ts#L3"},"async/filterAsync.ts:3")),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"filterAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"predicate"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence that has been filtered by the specified condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1, 2, 3, 4, 5]).pipe(\n  filterAsync(async i => i % 2 == 0)\n).toArrayAsync();\n//result: [2,4]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"with User Defined Type Guard")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1,'a',2,'b'])\n  .pipe(\n    filterAsync<number | string, string>((i): i is string => typeof i === 'string')\n  )\n  .toMutableArrayAsync();\n//result: ['a','b']\n//result type is string[]\n")),(0,r.kt)("h4",{id:"type-parameters-36"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-35"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"predicate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"boolean"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Conditional functions for filtering.")))),(0,r.kt)("h4",{id:"returns-36"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-36"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/filterAsync.ts#L4"},"async/filterAsync.ts:4")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"finalizeasync"},"finalizeAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"finalizeAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"action"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Invokes a specified action after the source iterable sequence terminates normally or exceptionally."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1, 2, 3, 4, 5]).pipe(\n  takeAsync(3),\n  finalizeAsync(async () => console.log('finalized'))\n).toArrayAsync();\n\n//result: [1,2,3]\n//console: finalized\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const source = fromAsAsync([1, 2, 3, 4, 5]).pipe(\n  takeAsync(3),\n  finalizeAsync(async () => console.log('finalized'))\n);\n\nfor await (const one of source) {\n  console.log(one)\n}\n\n//console: 1\n//console: 2\n//console: 3\n//console: finalized\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"break")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const source = fromAsAsync([1, 2, 3, 4, 5]).pipe(\n  takeAsync(3),\n  finalizeAsync(async () => console.log('finalized'))\n);\n\nfor await (const one of source) {\n  console.log(one)\n  if(one == 2) break;\n}\n\n//console: 1\n//console: 2\n//console: finalized\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1, 2, 3, 4, 5]).pipe(\n  takeAsync(3),\n  finalizeAsync(async () => console.log('finalized'))\n).valueAsync(findAsync(async i => i == 2));\n\n//result: 2\n//console: finalized\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"error")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1, 2, 3, 4, 5]).pipe(\n  takeAsync(3),\n  tapAsync(async () => {throw new Error('test')}),\n  finalizeAsync(async () => console.log('finalized'))\n).toArrayAsync();\n\n//console: finalized\n")),(0,r.kt)("h4",{id:"type-parameters-37"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-36"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"action")),(0,r.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"void"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"finalize action.")))),(0,r.kt)("h4",{id:"returns-37"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-37"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/finalizeAsync.ts#L76"},"async/finalizeAsync.ts:76")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"flattenasync"},"flattenAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"flattenAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Returns a flattened sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = await fromAsAsync([[1,2],[3,4]]).pipe(\n  flattenAsync(async i => i)\n).toArrayAsync();\n\n//result1: [1,2,3,4]\n\nconst result2 = await fromAsAsync([\n   {values:[1,2]},\n   {values:[3,4]}\n ]).pipe(\n   flattenAsync(async i => i.values)\n ).toArrayAsync();\n\n//result2: [1,2,3,4]\n")),(0,r.kt)("h4",{id:"type-parameters-38"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TResult")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Result element type.")))),(0,r.kt)("h4",{id:"parameters-37"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TResult"),">",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function that takes an element of a sequence and returns it in an Iterable form.")))),(0,r.kt)("h4",{id:"returns-38"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-38"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/flattenAsync.ts#L29"},"async/flattenAsync.ts:29")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"groupbyasync"},"groupByAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"groupByAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TValue"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"elementSelector?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", { ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"values"),": readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"TValue"),"[]  }",">"),(0,r.kt)("p",null,"Returns a sequence grouped by a specified key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const source1 = [\n  {groupKey: 1, value: "test1"},\n  {groupKey: 3, value: "test2"},\n  {groupKey: 1, value: "test3"},\n  {groupKey: 1, value: "test4"},\n  {groupKey: 3, value: "test5"},\n  {groupKey: 2, value: "test6"}\n]\n\nconst result1 = await fromAsAsync(source1).pipe(\n  groupByAsync(async one => one.groupKey)\n).toArrayAsync();\n\n// result1: [\n//   {key: 1, values: [\n//     {groupKey: 1, value: "test1"},\n//     {groupKey: 1, value: "test3"},\n//     {groupKey: 1, value: "test4"}\n//   ]},\n//   {key: 3, values: [\n//     {groupKey: 3, value: "test2"},\n//     {groupKey: 3, value: "test5"}\n//   ]},\n//   {key: 2, values: [\n//     {groupKey: 2, value: "test6"}\n//   ]}\n// ]\n\nconst source2 = [\n  {groupKey: {key: 1}, value: "test1"},\n  {groupKey: {key: 2}, value: "test2"},\n  {groupKey: {key: 1}, value: "test3"},\n  {groupKey: {key: 1}, value: "test4"},\n]\n\nconst result2 = await fromAsAsync(source2).pipe(\n  groupByAsync(\n    async one => one.groupKey,\n    async one => one.value,\n    async k => k.key\n)).toArrayAsync();\n\n// result2: [\n//   {key: {key: 1}, values: ["test1","test3","test4"]},\n//   {key: {key: 2}, values: ["test2"]}\n// ];\n')),(0,r.kt)("p",null,"For more information on ",(0,r.kt)("em",{parentName:"p"},"keySelector")," and ",(0,r.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,r.kt)("p",null,"The implementation of ",(0,r.kt)("em",{parentName:"p"},"asyncDefaultSelector")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const asyncDefaultSelector = (target: any): any => Promise.resolve(target);\n")),(0,r.kt)("h4",{id:"type-parameters-39"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,r.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type that will be enumerated in the Value property of the grouped result.")))),(0,r.kt)("h4",{id:"parameters-38"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"target"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality..")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"elementSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"target"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TValue"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"asyncDefaultSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object to be enumerated in the Value property of the grouped result.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,r.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,r.kt)("h4",{id:"returns-39"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", { ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey")," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"values"),": readonly ",(0,r.kt)("inlineCode",{parentName:"p"},"TValue"),"[]  }",">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-39"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/groupByAsync.ts#L76"},"async/groupByAsync.ts:76")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"intersectasync"},"intersectAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"intersectAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence that is the product set of the current sequence and the specified sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = await fromAsAsync([1, 2, 3]).pipe(\n  intersectAsync([2,3,4,5])\n).toArrayAsync();\n//result1: [2,3]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst target = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'e\'}, value: "test2"},\n];\n\nconst result2 = await fromAsAsync(source).pipe(\n  intersectAsync(\n    target,\n    async i => i.groupKey,\n    async one => one.mainKey + one.subKey\n  )\n).toArrayAsync();\n\n// result2: [\n//   {"groupKey":{"mainKey":1,"subKey":"a"},"value":"test1"}\n// ]\n')),(0,r.kt)("p",null,"For more information on ",(0,r.kt)("em",{parentName:"p"},"keySelector")," and ",(0,r.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,r.kt)("p",null,"The implementation of ",(0,r.kt)("em",{parentName:"p"},"asyncDefaultSelector")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const asyncDefaultSelector = (target: any): any => Promise.resolve(target);\n")),(0,r.kt)("h4",{id:"type-parameters-40"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,r.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,r.kt)("h4",{id:"parameters-39"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sequence to be removed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"one"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"asyncDefaultSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,r.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,r.kt)("h4",{id:"returns-40"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-40"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/intersectAsync.ts#L55"},"async/intersectAsync.ts:55")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"mapasync"},"mapAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"mapAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Returns the sequence in which each element has been transformed by the specified transformation function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1, 2, 3, 4, 5]).pipe(\n  mapAsync(async i => i * i)\n).toArrayAsync();\n//result: [1,4,9,16,25]\n")),(0,r.kt)("h4",{id:"type-parameters-41"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TResult")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Transformed element type.")))),(0,r.kt)("h4",{id:"parameters-40"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TResult"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Transform function.")))),(0,r.kt)("h4",{id:"returns-41"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TResult"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-41"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/mapAsync.ts#L19"},"async/mapAsync.ts:19")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"orderbyasync"},"orderByAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"orderByAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sortType?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"compareFunction?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence sorted by a specified key."),(0,r.kt)("p",null,"Internally, it uses ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"},"Array.sort()"),", and its function is basically the same as Array.sort(), except that it is given a ",(0,r.kt)("em",{parentName:"p"},"compareFunction")," by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = await fromAsAsync([4,1,2,5,3]).pipe(\n  orderByAsync(i => i, 'asc')\n).toArrayAsync();\n\n//result1: [1,2,3,4,5]\n\nconst originalCompareFunction = (a: number, b:number) => {\n  if(a % 2 < b % 2) return - 1;\n  if(a % 2 > b % 2) return 1;\n  return 0;\n}\n\nconst result2 = await fromAsAsync([4,1,5,3,2]).pipe(\n  orderByAsync(i => i, 'asc', originalCompareFunction)\n).toArrayAsync();\n\n//result2: [4,2,1,5,3]\n")),(0,r.kt)("p",null,"Also, the implementation of the default ",(0,r.kt)("em",{parentName:"p"},"compareFunction")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const defaultSortFunction = (a: any, b: any) => {\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n")),(0,r.kt)("h4",{id:"type-parameters-42"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,r.kt)("h4",{id:"parameters-41"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return sort key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"sortType")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"SortType")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"'asc'")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"'asc'")," or ",(0,r.kt)("em",{parentName:"td"},"'desc'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"compareFunction")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"a"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"b"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"defaultCompareFunction")),(0,r.kt)("td",{parentName:"tr",align:"left"},"See ",(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"},"Array.sort()")," for more information.")))),(0,r.kt)("h4",{id:"returns-42"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-42"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/orderByAsync.ts#L47"},"async/orderByAsync.ts:47")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"repeatasync"},"repeatAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"repeatAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"count?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence that repeats the source sequence a specified number of times."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1, 2, 3]).pipe(repeatAsync(3)).toArrayAsync();\n//result: [1,2,3,1,2,3,1,2,3]\n")),(0,r.kt)("h4",{id:"type-parameters-43"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-42"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"count")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If this argument is not specified or -1 is specified, it repeats indefinitely. If a natural number is specified, it repeats the specified number of times.")))),(0,r.kt)("h4",{id:"returns-43"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-43"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/repeatAsync.ts#L16"},"async/repeatAsync.ts:16")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"reverseasync"},"reverseAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"reverseAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence in reverse order of the current sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await fromAsAsync([1, 2, 3, 4, 5]).pipe(\n  reverseAsync()\n).toArrayAsync();\n//result: [5,4,3,2,1]\n")),(0,r.kt)("h4",{id:"type-parameters-44"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"returns-44"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-44"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/reverseAsync.ts#L17"},"async/reverseAsync.ts:17")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"scanasync"},"scanAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"scanAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TAccumulate"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"seed"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TAccumulate"),">"),(0,r.kt)("p",null,"Returns the resulting sequence after applying the aggregate function to the elements of the current sequence.\nThe difference from ",(0,r.kt)("a",{parentName:"p",href:"/api/values/#reduce"},"reduce()")," is that each time the aggregate function is applied, the intermediate steps are also enumerated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const output = await fromAsAsync([1, 2, 3, 4, 5]).pipe(\n  scanAsync(100, async (acc, i) => acc + i)\n).toArrayAsync();\n\n//result: [101, 103, 106, 110, 115]\n")),(0,r.kt)("h4",{id:"type-parameters-45"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type returned by the aggregate function.")))),(0,r.kt)("h4",{id:"parameters-43"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"seed")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This is the initial value for aggregation.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"acc"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"current"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TAccumulate"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Aggregate function.")))),(0,r.kt)("h4",{id:"returns-45"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TAccumulate"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-45"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/scanAsync.ts#L22"},"async/scanAsync.ts:22")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"skipasync"},"skipAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"skipAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"count"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns the sequence with the specified number of skips."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await rangeAsAsync(1,10).pipe(\n  skipAsync(3)\n).toArrayAsync()\n\n//result: [4,5,6,7,8,9,10]\n")),(0,r.kt)("h4",{id:"type-parameters-46"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-44"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"count")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Number of pieces to skip.")))),(0,r.kt)("h4",{id:"returns-46"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-46"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/skipAsync.ts#L19"},"async/skipAsync.ts:19")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"skipwhileasync"},"skipWhileAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"skipWhileAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"predicate"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns the sequence of elements skipped while matching the condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await rangeAsAsync(1,10).pipe(\n  skipWhileAsync(async i => i < 8)\n).toArrayAsync()\n\n//result: [8,9,10]\n")),(0,r.kt)("h4",{id:"type-parameters-47"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-45"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"predicate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"boolean"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Condition to skip enumeration.")))),(0,r.kt)("h4",{id:"returns-47"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-47"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/skipWhileAsync.ts#L19"},"async/skipWhileAsync.ts:19")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"takeasync"},"takeAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"takeAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"count"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence that enumerates the specified number of items."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await rangeAsAsync(1,10).pipe(\n  takeAsync(3)\n).toArrayAsync()\n\n//result: [1,2,3]\n")),(0,r.kt)("h4",{id:"type-parameters-48"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-46"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"count")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Number to enumerate.")))),(0,r.kt)("h4",{id:"returns-48"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-48"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/takeAsync.ts#L19"},"async/takeAsync.ts:19")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"takewhileasync"},"takeWhileAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"takeWhileAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"predicate"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence to be enumerated only while the condition is matched."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await rangeAsAsync(1,10).pipe(\n  takeWhileAsync(async i => i < 5)\n).toArrayAsync()\n\n//result: [1,2,3,4]\n")),(0,r.kt)("h4",{id:"type-parameters-49"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-47"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"predicate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"boolean")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"boolean"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Condition.")))),(0,r.kt)("h4",{id:"returns-49"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-49"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/takeWhileAsync.ts#L19"},"async/takeWhileAsync.ts:19")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"tapasync"},"tapAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"tapAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"func"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Run side effects. The returning sequence is the same as the current one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = fromAsAsync([1,2,3]).pipe(\n  tapAsync(async i => console.log(i * i))\n).toArrayAsync();\n\n//result: [1,2,3]\n\n//console:\n// 1\n// 4\n// 9\n")),(0,r.kt)("h4",{id:"type-parameters-50"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")))),(0,r.kt)("h4",{id:"parameters-48"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"arg"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"index"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"number"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"void"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Side effects to perform")))),(0,r.kt)("h4",{id:"returns-50"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-50"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/tapAsync.ts#L24"},"async/tapAsync.ts:24")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"unionasync"},"unionAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"unionAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a sequence that is the union set of the current sequence and the specified sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = await fromAsAsync([1, 2, 3]).pipe(\n  unionAsync([2,3,4,5])\n).toArrayAsync();\n//result1: [1,2,3,4,5]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst target = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'e\'}, value: "test2"},\n];\n\nconst result2 = await fromAsAsync(source).pipe(\n  unionAsync(\n    target,\n    async i => i.groupKey,\n    async one => one.mainKey + one.subKey\n  )\n).toArrayAsync();\n\n// result2: [\n//   {"groupKey":{"mainKey":1,"subKey":"a"},"value":"test1"},\n//   {"groupKey":{"mainKey":2,"subKey":"b"},"value":"test2"},\n//   {"groupKey":{"mainKey":1,"subKey":"c"},"value":"test4"},\n//   {"groupKey":{"mainKey":2,"subKey":"e"},"value":"test2"}\n// ]\n')),(0,r.kt)("p",null,"For more information on ",(0,r.kt)("em",{parentName:"p"},"keySelector")," and ",(0,r.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,r.kt)("p",null,"The implementation of ",(0,r.kt)("em",{parentName:"p"},"asyncDefaultSelector")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const asyncDefaultSelector = (target: any): any => Promise.resolve(target);\n")),(0,r.kt)("h4",{id:"type-parameters-51"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,r.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,r.kt)("h4",{id:"parameters-49"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sequence to be removed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"one"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"asyncDefaultSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,r.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,r.kt)("h4",{id:"returns-51"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-51"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/unionAsync.ts#L58"},"async/unionAsync.ts:58")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"uniqasync"},"uniqAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"uniqAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TComparableValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TKey"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"keySelector?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"comparableValueForKey?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Returns a deduplicated sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const result1 = await fromAsAsync([1,1,3,2,4,4,4,1,5]).pipe(\n  uniqAsync()\n).toArrayAsync();\n//result1: [1,3,2,4,5]\n\nconst source = [\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test1"},\n {groupKey: {mainKey: 2, subKey: \'b\'}, value: "test2"},\n {groupKey: {mainKey: 1, subKey: \'a\'}, value: "test3"},\n {groupKey: {mainKey: 1, subKey: \'c\'}, value: "test4"},\n];\n\nconst result2 = await fromAsAsync(source).pipe(\n  uniqAsync(\n    async i => i.groupKey,\n    async one => one.mainKey + one.subKey\n  )\n).toArrayAsync();\n\n// result2: [\n//   {"groupKey":{"mainKey":1,"subKey":"a"},"value":"test1"},\n//   {"groupKey":{"mainKey":2,"subKey":"b"},"value":"test2"},\n//   {"groupKey":{"mainKey":1,"subKey":"c"},"value":"test4"},\n// ]\n')),(0,r.kt)("p",null,"For more information on ",(0,r.kt)("em",{parentName:"p"},"keySelector")," and ",(0,r.kt)("em",{parentName:"p"},"comparableValueForKey"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/#equality-strategy"},"Equality Strategy"),"."),(0,r.kt)("p",null,"The implementation of ",(0,r.kt)("em",{parentName:"p"},"asyncDefaultSelector")," is as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const asyncDefaultSelector = (target: any): any => Promise.resolve(target);\n")),(0,r.kt)("h4",{id:"type-parameters-52"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the return value returned by ",(0,r.kt)("em",{parentName:"td"},"comparableValueForKey"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"key type.")))),(0,r.kt)("h4",{id:"parameters-50"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"keySelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"target"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"asyncDefaultSelector")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Function to return the object used to check Equality.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"comparableValueForKey?")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"key"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"TKey"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"TComparableValue"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This function returns an object that is unique to the key selected by ",(0,r.kt)("em",{parentName:"td"},"keySelector"),". It is recommended to return a string or number.")))),(0,r.kt)("h4",{id:"returns-52"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Operator function."),(0,r.kt)("h4",{id:"defined-in-52"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/uniqAsync.ts#L50"},"async/uniqAsync.ts:50")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"zipwithasync"},"zipWithAsync"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"zipWithAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T5"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"source1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source5"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T5"),"]",">"),(0,r.kt)("p",null,"Returns a sequence of arrays consisting of the elements of the source array and the elements of the multiple sequences given as arguments, concatenated one by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = await fromAsAsync([1,2,3]).pipe(\n  zipWithAsync(['a','b'])\n).toArrayAsync();\n\n//result1: [[1,'a'],[2,'b']]\n\nconst result2 = await fromAsAsync([1,2,3]).pipe(\n  zipWithAsync(['a','b'],[true,false,true])\n).toArrayAsync();\n\n//result2: [[1,'a',true],[2,'b',false]]\n")),(0,r.kt)("h4",{id:"type-parameters-53"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"First element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T2")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T4")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fourth element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T5")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fifth element type.")))),(0,r.kt)("h4",{id:"parameters-51"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T1"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"First iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T2"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source3")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T3"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source4")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T4"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fourth iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source5")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T5"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fifth iterable.")))),(0,r.kt)("h4",{id:"returns-53"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T5"),"]",">"),(0,r.kt)("p",null,"[T,T1,T2,T3,T4,T5]"," sequence."),(0,r.kt)("h4",{id:"defined-in-53"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/zipWithAsync.ts#L35"},"async/zipWithAsync.ts:35")),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"zipWithAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"source1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source4"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),"]",">"),(0,r.kt)("p",null,"Returns a sequence of arrays consisting of the elements of the source array and the elements of the multiple sequences given as arguments, concatenated one by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = await fromAsAsync([1,2,3]).pipe(\n  zipWithAsync(['a','b'])\n).toArrayAsync();\n\n//result1: [[1,'a'],[2,'b']]\n\nconst result2 = await fromAsAsync([1,2,3]).pipe(\n  zipWithAsync(['a','b'],[true,false,true])\n).toArrayAsync();\n\n//result2: [[1,'a',true],[2,'b',false]]\n")),(0,r.kt)("h4",{id:"type-parameters-54"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"First element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T2")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T4")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fourth element type.")))),(0,r.kt)("h4",{id:"parameters-52"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T1"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"First iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T2"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source3")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T3"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source4")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T4"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Fourth iterable.")))),(0,r.kt)("h4",{id:"returns-54"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T4"),"]",">"),(0,r.kt)("p",null,"[T,T1,T2,T3,T4]"," sequence."),(0,r.kt)("h4",{id:"defined-in-54"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/zipWithAsync.ts#L72"},"async/zipWithAsync.ts:72")),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"zipWithAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"source1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source3"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),"]",">"),(0,r.kt)("p",null,"Returns a sequence of arrays consisting of the elements of the source array and the elements of the multiple sequences given as arguments, concatenated one by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = await fromAsAsync([1,2,3]).pipe(\n  zipWithAsync(['a','b'])\n).toArrayAsync();\n\n//result1: [[1,'a'],[2,'b']]\n\nconst result2 = await fromAsAsync([1,2,3]).pipe(\n  zipWithAsync(['a','b'],[true,false,true])\n).toArrayAsync();\n\n//result2: [[1,'a',true],[2,'b',false]]\n")),(0,r.kt)("h4",{id:"type-parameters-55"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"First element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T2")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third element type.")))),(0,r.kt)("h4",{id:"parameters-53"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T1"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"First iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T2"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source3")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T3"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Third iterable.")))),(0,r.kt)("h4",{id:"returns-55"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T3"),"]",">"),(0,r.kt)("p",null,"[T,T1,T2,T3]"," sequence."),(0,r.kt)("h4",{id:"defined-in-55"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/zipWithAsync.ts#L106"},"async/zipWithAsync.ts:106")),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"zipWithAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"source1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source2"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),"]",">"),(0,r.kt)("p",null,"Returns a sequence of arrays consisting of the elements of the source array and the elements of the multiple sequences given as arguments, concatenated one by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = await fromAsAsync([1,2,3]).pipe(\n  zipWithAsync(['a','b'])\n).toArrayAsync();\n\n//result1: [[1,'a'],[2,'b']]\n\nconst result2 = await fromAsAsync([1,2,3]).pipe(\n  zipWithAsync(['a','b'],[true,false,true])\n).toArrayAsync();\n\n//result2: [[1,'a',true],[2,'b',false]]\n")),(0,r.kt)("h4",{id:"type-parameters-56"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"First element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T2")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second element type.")))),(0,r.kt)("h4",{id:"parameters-54"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T1"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"First iterable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T2"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Second iterable.")))),(0,r.kt)("h4",{id:"returns-56"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T2"),"]",">"),(0,r.kt)("p",null,"[T,T1,T2]"," sequence."),(0,r.kt)("h4",{id:"defined-in-56"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/zipWithAsync.ts#L133"},"async/zipWithAsync.ts:133")),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"zipWithAsync"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"source1"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),"]",">"),(0,r.kt)("p",null,"Returns a sequence of arrays consisting of the elements of the source array and the elements of the multiple sequences given as arguments, concatenated one by one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result1 = await fromAsAsync([1,2,3]).pipe(\n  zipWithAsync(['a','b'])\n).toArrayAsync();\n\n//result1: [[1,'a'],[2,'b']]\n\nconst result2 = await fromAsAsync([1,2,3]).pipe(\n  zipWithAsync(['a','b'],[true,false,true])\n).toArrayAsync();\n\n//result2: [[1,'a',true],[2,'b',false]]\n")),(0,r.kt)("h4",{id:"type-parameters-57"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Source element type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"First element type.")))),(0,r.kt)("h4",{id:"parameters-55"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"source1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"AllIterables"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T1"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"First iterable.")))),(0,r.kt)("h4",{id:"returns-57"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncOperator"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ","[",(0,r.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"T1"),"]",">"),(0,r.kt)("p",null,"[T,T1]"," sequence."),(0,r.kt)("h4",{id:"defined-in-57"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ugaya40/leseq/blob/71dead3/packages/leseq/src/operators/async/zipWithAsync.ts#L158"},"async/zipWithAsync.ts:158")))}k.isMDXComponent=!0}}]);