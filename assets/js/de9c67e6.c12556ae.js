"use strict";(self.webpackChunkleseq_docs=self.webpackChunkleseq_docs||[]).push([[68],{876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(y,l(l({ref:t},c),{},{components:n})):r.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6561:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7896),a=(n(2784),n(876));const o={id:"seq",title:"Seq<T>/AsyncSeq<T> Object",sidebar_label:"Seq<T>/AsyncSeq<T> Object",sidebar_position:.5,custom_edit_url:null,hide_title:!0},l=void 0,i={unversionedId:"seq",id:"seq",title:"Seq<T>/AsyncSeq<T> Object",description:"Seq Object",source:"@site/docs/seq.md",sourceDirName:".",slug:"/seq",permalink:"/leseq/seq",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:.5,frontMatter:{id:"seq",title:"Seq<T>/AsyncSeq<T> Object",sidebar_label:"Seq<T>/AsyncSeq<T> Object",sidebar_position:.5,custom_edit_url:null,hide_title:!0},sidebar:"mainSidebar",previous:{title:"Overview",permalink:"/leseq/"},next:{title:"Create Original Functions",permalink:"/leseq/create"}},s={},p=[{value:"Seq&lt;T&gt; Object",id:"seqt-object",level:2},{value:"AsyncSeq&lt;T&gt; Object",id:"asyncseqt-object",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"seqt-object"},"Seq<T",">"," Object"),(0,a.kt)("p",null,"The Seq<T",">"," object is the core object; it is created by the ",(0,a.kt)("strong",{parentName:"p"},"Generator")," and is also the argument and return value of the ",(0,a.kt)("strong",{parentName:"p"},"Operator"),"."),(0,a.kt)("p",null,"The Seq<T",">"," object has the following methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"method"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"pipe"),(0,a.kt)("td",{parentName:"tr",align:null},"Takes an arbitrary number of ",(0,a.kt)("strong",{parentName:"td"},"Operators")," as arguments and converts the sequence.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"to"),(0,a.kt)("td",{parentName:"tr",align:null},"Take one ",(0,a.kt)("strong",{parentName:"td"},"To")," and convert it into a sequence with different characteristics.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"value"),(0,a.kt)("td",{parentName:"tr",align:null},"Takes only one ",(0,a.kt)("strong",{parentName:"td"},"Value")," and converts the sequence to a value.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"forEach"),(0,a.kt)("td",{parentName:"tr",align:null},"Performs iterative processing on elements of a sequence.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"toArray"),(0,a.kt)("td",{parentName:"tr",align:null},"Converts a sequence to an readonly array.(Type of the return value is ",(0,a.kt)("inlineCode",{parentName:"td"},"readonly T[]"),". The only difference from ",(0,a.kt)("inlineCode",{parentName:"td"},"toMutableArray()")," is the return type.)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"toMutableArray"),(0,a.kt)("td",{parentName:"tr",align:null},"Converts a sequence to an array. (Type of the return value is ",(0,a.kt)("inlineCode",{parentName:"td"},"T[]"),". The only difference from ",(0,a.kt)("inlineCode",{parentName:"td"},"toArray()")," is the return type.)")))),(0,a.kt)("p",null,"Because it is a lazy list, it does not execute processing when ",(0,a.kt)("strong",{parentName:"p"},"pipe()")," is called, but only when ",(0,a.kt)("strong",{parentName:"p"},"value()"),", ",(0,a.kt)("em",{parentName:"p"},"toArray()**, or "),"forEach()** is called."),(0,a.kt)("h2",{id:"asyncseqt-object"},"AsyncSeq<T",">"," Object"),(0,a.kt)("p",null,"It can be created by passing ",(0,a.kt)("a",{parentName:"p",href:"https://ugaya40.github.io/leseq/api/to/#asyncseq"},"asyncSeq()")," to ",(0,a.kt)("strong",{parentName:"p"},"to()")," of Seq<T",">"," or by using ",(0,a.kt)("a",{parentName:"p",href:"https://ugaya40.github.io/leseq/api/generators/#async-generators"},"Async Generators"),".\nBasically the same as Seq<T",">",", but ",(0,a.kt)("strong",{parentName:"p"},"valueAsync()"),", ",(0,a.kt)("strong",{parentName:"p"},"toArrayAsync()"),", and ",(0,a.kt)("strong",{parentName:"p"},"foreachAsync()")," are async function. Also, only an asynchronous version of ",(0,a.kt)("strong",{parentName:"p"},"Operators"),"/",(0,a.kt)("strong",{parentName:"p"},"to"),"/",(0,a.kt)("strong",{parentName:"p"},"Values"),", which is passed to ",(0,a.kt)("strong",{parentName:"p"},"pipe()/to()/valueAsync()"),", is allowed."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"method"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"pipe"),(0,a.kt)("td",{parentName:"tr",align:null},"Takes an arbitrary number of ",(0,a.kt)("strong",{parentName:"td"},"Operators")," as arguments and converts the sequence.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"to"),(0,a.kt)("td",{parentName:"tr",align:null},"Take one ",(0,a.kt)("strong",{parentName:"td"},"To")," and convert it into a sequence with different characteristics.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"valueAsync"),(0,a.kt)("td",{parentName:"tr",align:null},"Takes only one ",(0,a.kt)("strong",{parentName:"td"},"Value")," and converts the sequence to a value.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"forEachAsync"),(0,a.kt)("td",{parentName:"tr",align:null},"Performs iterative processing on elements of a sequence.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"toArrayAsync"),(0,a.kt)("td",{parentName:"tr",align:null},"Converts a sequence to an readonly array. (Type of the return value is ",(0,a.kt)("inlineCode",{parentName:"td"},"Promise<readonly T[]>"),". The only difference from ",(0,a.kt)("inlineCode",{parentName:"td"},"toMutableArrayAsync()")," is the return type.)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"toMutableArrayAsync"),(0,a.kt)("td",{parentName:"tr",align:null},"Converts a sequence to an array. (Type of the return value is ",(0,a.kt)("inlineCode",{parentName:"td"},"Promise<T[]>"),". The only difference from ",(0,a.kt)("inlineCode",{parentName:"td"},"toArrayAsync()")," is the return type.)")))))}u.isMDXComponent=!0}}]);