"use strict";(self.webpackChunkleseq_docs=self.webpackChunkleseq_docs||[]).push([[632],{876:function(e,t,n){n.d(t,{Zo:function(){return y},kt:function(){return m}});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},y=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,u=e.originalType,s=e.parentName,y=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,b=p["".concat(s,".").concat(m)]||p[m]||c[m]||u;return n?r.createElement(b,o(o({ref:t},y),{},{components:n})):r.createElement(b,o({ref:t},y))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var u=n.length,o=new Array(u);o[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<u;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8483:function(e,t,n){n.r(t),n.d(t,{assets:function(){return y},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=n(7896),a=n(1461),u=(n(2784),n(876)),o=["components"],i={id:"equality",title:"Equality Strategy",sidebar_label:"Equality Strategy",sidebar_position:.5,custom_edit_url:null,hide_title:!0},s=void 0,l={unversionedId:"equality",id:"equality",title:"Equality Strategy",description:"Equality Strategy",source:"@site/docs/equality.md",sourceDirName:".",slug:"/equality",permalink:"/leseq/equality",editUrl:null,tags:[],version:"current",sidebarPosition:.5,frontMatter:{id:"equality",title:"Equality Strategy",sidebar_label:"Equality Strategy",sidebar_position:.5,custom_edit_url:null,hide_title:!0},sidebar:"mainSidebar",previous:{title:"Create Original Functions",permalink:"/leseq/create"},next:{title:"Finalization, and Resource Management",permalink:"/leseq/finalize"}},y={},c=[{value:"Equality Strategy",id:"equality-strategy",level:2}],p={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,u.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h2",{id:"equality-strategy"},"Equality Strategy"),(0,u.kt)("p",null,"Some Operators, such as ",(0,u.kt)("a",{parentName:"p",href:"/api/operators/#uniq"},"uniq"),", ",(0,u.kt)("a",{parentName:"p",href:"/api/operators/#groupby"},"groupBy"),", ",(0,u.kt)("a",{parentName:"p",href:"/api/operators/#union"},"union"),", etc., can take ",(0,u.kt)("strong",{parentName:"p"},"keySelector")," and ",(0,u.kt)("strong",{parentName:"p"},"comparableValueForKey")," as arguments. If the key is a string or a number, there is nothing to worry about, but if the key is an object, you need to be careful."),(0,u.kt)("p",null,"If the key is an object, it will be processed using the so-called ",(0,u.kt)("em",{parentName:"p"},'"reference equality"')," of the object unless ",(0,u.kt)("strong",{parentName:"p"},"comparableValueForKey")," argument is specified at the same time."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-typescript"},"const source = [\n  {groupKey: {mainKey: 1, subKey: 'a'}, value: \"test1\"},\n  {groupKey: {mainKey: 2, subKey: 'b'}, value: \"test2\"},\n  {groupKey: {mainKey: 1, subKey: 'a'}, value: \"test3\"},\n  {groupKey: {mainKey: 1, subKey: 'c'}, value: \"test4\"},\n]\n\nconst result = from(source).pipe(groupBy(one => one.groupKey)).toArray();\n\n/*\nunwanted result \xd7\nresult: [\n  {key: {mainKey: 1, subKey: 'a'}, values: [\n    {groupKey: {mainKey: 1, subKey: 'a'}, value: \"test1\"}\n  ]},\n  {key: {mainKey: 2, subKey: 'b'}, values: [\n    {groupKey: {mainKey: 2, subKey: 'b'}, value: \"test2\"}\n  ]},\n  {key: {mainKey: 1, subKey: 'a'}, values: [\n    {groupKey: {mainKey: 1, subKey: 'a'}, value: \"test3\"}\n  ]},\n  {key: {mainKey: 1, subKey: 'c'}, values: [\n    {groupKey: {mainKey: 1, subKey: 'c'}, value: \"test4\"}\n  ]}\n]\n*/\n")),(0,u.kt)("p",null,"If key is an object and you want to process it using the so-called ",(0,u.kt)("em",{parentName:"p"},'"value equality"')," of key, specify ",(0,u.kt)("strong",{parentName:"p"},"comparableValueForKey")," and make sure that ",(0,u.kt)("strong",{parentName:"p"},"comparableValueForKey")," returns the same value for all objects that can be considered structurally unique to the extent necessary.  (In many cases, using hash function is excessive.)"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-typescript"},"const comparableValueForKey = (key: {mainKey: number, subKey: string}) => key.mainKey + key.subKey;\n\nconst source = [\n  {groupKey: {mainKey: 1, subKey: 'a'}, value: \"test1\"},\n  {groupKey: {mainKey: 2, subKey: 'b'}, value: \"test2\"},\n  {groupKey: {mainKey: 1, subKey: 'a'}, value: \"test3\"},\n  {groupKey: {mainKey: 1, subKey: 'c'}, value: \"test4\"},\n]\n\nconst result = from(source).pipe(uniq(one => one.groupKey,i => i, comparableValueForKey)).toArray();\n\n/*\nas expected \u3007\nresult: [\n  {key: {mainKey: 1, subKey: 'a'}, values: [\n    {groupKey: {mainKey: 1, subKey: 'a'}, value: \"test1\"},\n    {groupKey: {mainKey: 1, subKey: 'a'}, value: \"test3\"}\n  ]},\n  {key: {mainKey: 2, subKey: 'b'}, values: [\n    {groupKey: {mainKey: 2, subKey: 'b'}, value: \"test2\"}\n  ]},\n  {key: {mainKey: 1, subKey: 'c'}, values: [\n    {groupKey: {mainKey: 1, subKey: 'c'}, value: \"test4\"}\n  ]},\n]\n*/\n")))}m.isMDXComponent=!0}}]);